diff --git a/include/DBoW2/TemplatedDatabase.h b/include/DBoW2/TemplatedDatabase.h
index 96cbe8e..444863b 100644
--- a/include/DBoW2/TemplatedDatabase.h
+++ b/include/DBoW2/TemplatedDatabase.h
@@ -16,6 +16,7 @@
 #include <string>
 #include <list>
 #include <set>
+#include <iomanip>
 
 #include "TemplatedVocabulary.h"
 #include "QueryResults.h"
@@ -223,6 +224,8 @@ public:
   virtual void load(const cv::FileStorage &fs, 
     const std::string &name = "database");
 
+  size_t reportMemoryUsage();
+
 protected:
   
   /// Query with L1 scoring
@@ -1345,6 +1348,65 @@ std::ostream& operator<<(std::ostream &os,
 
 // --------------------------------------------------------------------------
 
+template<class TDescriptor, class F>
+size_t TemplatedDatabase<TDescriptor,F>::reportMemoryUsage()
+{
+#define FF_REPORT(field) \
+  std::cout << "  " << std::setw(12) << field << "   " << #field << std::endl;
+
+  std::cout << "  DBoW database:" << std::endl;
+
+  size_t num_rows = m_ifile.size();
+  FF_REPORT(num_rows);
+
+  size_t num_ifpairs = std::accumulate(m_ifile.begin(), m_ifile.end(), 0,
+                                     [](size_t accum, const std::list<IFPair>& r) {
+                                       return accum + r.size();
+                                     });
+  FF_REPORT(num_ifpairs);
+
+  std::cout << std::endl;
+
+  // typedef std::list<IFPair> IFRow;
+  // typedef std::vector<IFRow> InvertedFile;
+  size_t m_ifile_bytes =
+    m_ifile.size() * sizeof(std::list<IFPair>)
+    + std::accumulate(m_ifile.begin(), m_ifile.end(), 0,
+                      [](size_t accum, const std::list<IFPair>& r) {
+                        constexpr size_t list_bytes_per_node = 2 * sizeof(void *);
+                        return accum + r.size() * (list_bytes_per_node + sizeof(IFPair));
+                      });
+  FF_REPORT(m_ifile_bytes);
+
+
+  // class FeatureVector: public std::map<NodeId, std::vector<unsigned int> >
+  // typedef std::vector<FeatureVector> DirectFile;
+  // some of this is platform- and data-dependent, just rough approximation
+  const int map_node_bytes = sizeof(int) + 3 * sizeof(void *); // red/black tree node ~overhead
+  size_t m_dfile_bytes =
+    m_dfile.size() * sizeof(FeatureVector)
+    + std::accumulate(m_dfile.begin(), m_dfile.end(), 0,
+                      [](size_t accum, const FeatureVector& v) {
+                        size_t v_bytes =
+                          v.size() * (map_node_bytes + sizeof(NodeId) + sizeof(std::vector<unsigned int>))
+                          + std::accumulate(v.begin(), v.end(), 0,
+                                            [](size_t acc, const std::pair<NodeId, std::vector<unsigned int> >& x) {
+                                              return acc + x.second.size() * sizeof(unsigned int);
+                                            });
+                        return accum + v_bytes;
+                      });
+  FF_REPORT(m_dfile_bytes);
+
+  std::cout << std::endl;
+  size_t m_voc_bytes  = m_voc->reportMemoryUsage();
+
+#undef FF_REPORT
+
+  return m_ifile_bytes + m_dfile_bytes + m_voc_bytes;
+}
+
+// --------------------------------------------------------------------------
+
 } // namespace DBoW2
 
 #endif
diff --git a/include/DBoW2/TemplatedVocabulary.h b/include/DBoW2/TemplatedVocabulary.h
index 53a0e30..028745e 100644
--- a/include/DBoW2/TemplatedVocabulary.h
+++ b/include/DBoW2/TemplatedVocabulary.h
@@ -17,6 +17,7 @@
 #include <fstream>
 #include <string>
 #include <algorithm>
+#include <iomanip>
 #include <opencv2/core.hpp>
 
 #include "FeatureVector.h"
@@ -266,6 +267,8 @@ public:
    */
   virtual int stopWords(double minWeight);
 
+  virtual size_t reportMemoryUsage();
+
 protected:
 
   /// Pointer to descriptor
@@ -1524,6 +1527,40 @@ std::ostream& operator<<(std::ostream &os,
   return os;
 }
 
+// --------------------------------------------------------------------------
+
+template<class TDescriptor, class F>
+size_t TemplatedVocabulary<TDescriptor,F>::reportMemoryUsage()
+{
+#define FF_REPORT(field) \
+  std::cout << "  " << std::setw(12) << field << "   " << #field << std::endl;
+
+  std::cout << "  DBoW vocabulary:" << std::endl;
+
+  size_t num_nodes = m_nodes.size();
+  FF_REPORT(num_nodes);
+
+  size_t num_words = m_words.size();
+  FF_REPORT(num_words);
+
+  std::cout << std::endl;
+
+  size_t m_nodes_bytes = m_nodes.size() * sizeof(Node)
+    + std::accumulate(m_nodes.begin(), m_nodes.end(), 0,
+                      [](size_t accum, const Node& n) {
+                        return accum + n.children.size() * sizeof(NodeId);
+                      });
+  FF_REPORT(m_nodes_bytes);
+
+  size_t m_words_bytes = m_words.size() * sizeof(Node*);
+  FF_REPORT(m_words_bytes);
+
+#undef FF_REPORT
+
+  return m_nodes_bytes + m_words_bytes;
+}
+
+
 } // namespace DBoW2
 
 #endif
