#!/usr/bin/python
#
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

import argparse
import sys
import os
import os.path
import math
import time

sys.path.insert(0, os.path.dirname(os.path.realpath(__file__)) + '/../../ekf_bag/scripts')
import environment

def run_ekf(astrobee_map, astrobee_bag, output_file, ekf_in_bag = False, features_in_bag=False, image_topic=None, use_jem=False):
  cmd = '' if ekf_in_bag else '--run_ekf %s' % ('' if features_in_bag else '--gen_features')

  robot_bias = os.path.dirname(os.path.abspath(astrobee_bag)) + '/imu_bias.config'
  cmd = 'rosrun ekf_video ekf_to_video %s %s %s %s' % (cmd, astrobee_map, astrobee_bag, output_file)
  print('Not running EKF.' if ekf_in_bag else 'Running EKF.')
  if not ekf_in_bag:
      print( 'Using features from bag.' if features_in_bag else 'Generating features from image.')
  if os.path.isfile(robot_bias):
      cmd += ' ' + robot_bias
  if image_topic is not None:
      cmd += ' --image_topic ' + image_topic
  if use_jem:
      cmd += ' --use_jem'
  os.system(cmd)

epilog_msg="""
The arguments BAG or MAP could be ommitted if specificed with the following 
environement variables:
  - ASTROBEE_BAG instead of positional argument 1 BAG
  - ASTROBEE_MAP instead of positional argument 2 MAP

If [-r ROBOT] in not used, then the robot configuration file should be copied 
locally as 'robot.config'.
"""

parser = argparse.ArgumentParser(description='Graph the EKF from a ros bag file.', epilog=epilog_msg, formatter_class=argparse.RawDescriptionHelpFormatter)

parser.add_argument('-e', '--ekf_in_bag', dest='ekf_in_bag', action='store_true',
                    help='Use EKF message from bag instead of running EKF on images.')
parser.add_argument('-f', '--features_in_bag', dest='features_in_bag', action='store_true',
                    help='Use feature message from bag in EKF instead of generating from images.')
parser.add_argument('-j', '--use_jem_extends', dest='use_jem', action='store_true',
                    help='Use JEM mode: draw both a top and side view of the robot pose in the JEM. By default, the program draws a top view of the granite table.')
parser.add_argument('-r', '--robot_name', dest='robot_name', metavar='ROBOT',
                    help='Specify the robot to use (just name, not path).')
parser.add_argument('-i', '--image_topic', dest='image_topic', default=None,
                    help='Use specified image topic.')
parser.add_argument('bag_file', metavar='BAG', nargs='?',
                    help='bag to process')
parser.add_argument('map_file', metavar='MAP', nargs='?',
                    help='map to use')

args, args_unknown = parser.parse_known_args()

(astrobee_map, astrobee_bag, robot_config) = environment.initialize_environment(args.map_file, args.bag_file, args.robot_name)

video_name = astrobee_bag[:astrobee_bag.rfind('.')] + '.mkv'

start = time.time()
run_ekf(astrobee_map, astrobee_bag, video_name, args.ekf_in_bag, args.features_in_bag, args.image_topic, args.use_jem)
run_time = time.time() - start
print 'Complete! Video output to %s. Run time: %g\n' % (video_name, run_time)

