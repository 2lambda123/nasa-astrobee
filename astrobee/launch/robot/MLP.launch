<!-- Copyright (c) 2017, United States Government, as represented by the     -->
<!-- Administrator of the National Aeronautics and Space Administration.     -->
<!--                                                                         -->
<!-- All rights reserved.                                                    -->
<!--                                                                         -->
<!-- The Astrobee platform is licensed under the Apache License, Version 2.0 -->
<!-- (the "License"); you may not use this file except in compliance with    -->
<!-- the License. You may obtain a copy of the License at                    -->
<!--                                                                         -->
<!--     http://www.apache.org/licenses/LICENSE-2.0                          -->
<!--                                                                         -->
<!-- Unless required by applicable law or agreed to in writing, software     -->
<!-- distributed under the License is distributed on an "AS IS" BASIS,       -->
<!-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or         -->
<!-- implied. See the License for the specific language governing            -->
<!-- permissions and limitations under the License.                          -->

<launch>

  <!-- Additional options -->
  <arg name="drivers"/>                          <!-- Start platform drivers -->
  <arg name="nodes" default=""/>                 <!-- Load certain nodes     -->
  <arg name="dds" default="true"/>               <!-- Should DDS be started  -->
  <arg name="output" default="log"/>             <!-- Where nodes should log -->

  <!-- Setup nodelet managers -->
  <group if="$(eval optenv('ASTROBEE_NODEGRAPH','')=='')">
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_management" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_monitors" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_communications" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_serial" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_localization" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_mobility" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_vision" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_depth_cam" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_arm" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_dock" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_perch" output="$(arg output)"/>
    <node pkg="nodelet" type="nodelet" args="manager"
          name="mlp_mapper" output="$(arg output)"/>
  </group>

  <!-- Vision / localization -->
  <include file="$(find localization_manager)/launch/localization_manager.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('localization_manager') != -1)">
    <arg name="name" value="localization_manager" />
    <arg name="manager" value="mlp_localization" />
  </include>
  <include file="$(find image_sampler)/launch/image_sampler.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('image_sampler') != -1)">
    <arg name="name" value="image_sampler" />
    <arg name="manager" value="mlp_vision" />
  </include>
  <include file="$(find handrail_detect)/launch/handrail_detect.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('handrail_detect') != -1)">
    <arg name="name" value="handrail_detect" />
    <arg name="manager" value="mlp_depth_cam" />
  </include>

  <!-- Mobility -->
  <include file="$(find mapper)/launch/mapper.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('mapper') != -1)">
    <arg name="name" value="mapper" />
    <arg name="manager" value="mlp_mapper" />
  </include>
  <include file="$(find planner_qp)/launch/planner_qp.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('planner_qp') != -1)">
    <arg name="name" value="planner_qp" />
    <arg name="manager" value="mlp_mobility" />
  </include>
  <include file="$(find choreographer)/launch/choreographer.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('choreographer') != -1)">
    <arg name="name" value="choreographer" />
    <arg name="manager" value="mlp_mobility" />
  </include>
  <include file="$(find planner_trapezoidal)/launch/planner_trapezoidal.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('planner_trapezoidal') != -1)">
    <arg name="name" value="planner_trapezoidal" />
    <arg name="manager" value="mlp_mobility" />
  </include>
  <include file="$(find framestore)/launch/framestore.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('framestore') != -1)">
    <arg name="name" value="framestore" />
    <arg name="manager" value="mlp_mobility" />
  </include>

  <!-- Behaviors -->
  <include file="$(find dock)/launch/dock.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('dock') != -1)">
    <arg name="name" value="dock" />
    <arg name="manager" value="mlp_dock" />
  </include>
  <include file="$(find arm)/launch/arm.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('arm') != -1)">
    <arg name="name" value="arm" />
    <arg name="manager" value="mlp_arm" />
  </include>
  <!--
  <include file="$(find perch)/launch/perch.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('perch') != -1)">
    <arg name="name" value="perch" />
    <arg name="manager" value="mlp_perch" />
  </include>
  -->

  <!-- Management -->
  <include file="$(find executive)/launch/executive.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('executive') != -1)">
    <arg name="name" value="executive" />
    <arg name="manager" value="mlp_management" />
  </include>
  <include file="$(find access_control)/launch/access_control.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('access_control') != -1)">
    <arg name="name" value="access_control" />
    <arg name="manager" value="mlp_management" />
  </include>
  <include file="$(find data_bagger)/launch/data_bagger.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('data_bagger') != -1)">
    <arg name="name" value="data_bagger" />
    <arg name="manager" value="mlp_management" />
  </include>

  <!-- Monitors -->
  <include file="$(find disk_monitor)/launch/disk_monitor.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('mlp_disk_monitor') != -1)">
    <arg name="name" value="mlp_disk_monitor" />
    <arg name="manager" value="mlp_monitors" />
  </include>
  <include file="$(find sys_monitor)/launch/sys_monitor.launch"
    if="$(eval arg('nodes') == '' or arg('nodes').find('sys_monitor') != -1)">
    <arg name="name" value="sys_monitor" />
    <arg name="manager" value="mlp_monitors" />
  </include>

  <!-- Communications -->
  <include file="$(find dds_ros_bridge)/launch/dds_ros_bridge.launch"
    if="$(eval (arg('nodes') == '' or arg('nodes').find('dds_ros_bridge') != -1) and arg('dds'))">
    <arg name="name" value="dds_ros_bridge" />
    <arg name="manager" value="mlp_communications" />
  </include>

  <!-- Drivers (optional) -->
  <group if="$(arg drivers)">
    <!-- NavCam pipeline -->
    <include file="$(find is_camera)/launch/is_camera.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('nav_cam') != -1)">
      <arg name="name" value="nav_cam" />
      <arg name="manager" value="mlp_vision" />
    </include>
    <include file="$(find localization_node)/launch/localization_node.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('localization_node') != -1)">
      <arg name="name" value="localization_node" />
      <arg name="manager" value="mlp_vision" />
    </include>
    <include file="$(find lk_optical_flow)/launch/lk_optical_flow.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('lk_optical_flow') != -1)">
      <arg name="name" value="optical_flow_nodelet" />
      <arg name="manager" value="mlp_vision" />
    </include>
    <!-- DockCam pipeline -->
    <include file="$(find is_camera)/launch/is_camera.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('dock_cam') != -1)">
      <arg name="name" value="dock_cam" />
      <arg name="manager" value="mlp_vision" />
    </include>
    <include file="$(find marker_tracking)/launch/marker_tracking.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('marker_tracking') != -1)">
      <arg name="name" value="marker_tracking" />
      <arg name="manager" value="mlp_vision" />
    </include>
    <!-- Depth camera pipeline -->
    <include file="$(find pico_driver)/launch/pico_driver.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('pico_driver') != -1)">
      <arg name="name" value="pico_driver" />
      <arg name="manager" value="mlp_depth_cam" />
    </include>
    <!-- Perching arm -->
    <include file="$(find perching_arm)/launch/perching_arm.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('perching_arm') != -1)">
      <arg name="name" value="perching_arm" />
      <arg name="manager" value="mlp_serial" />
    </include>
    <!-- Monitors -->
    <include file="$(find cpu_monitor)/launch/cpu_monitor.launch"
      if="$(eval arg('nodes') == '' or arg('nodes').find('mlp_cpu_monitor') != -1)">
      <arg name="name" value="mlp_cpu_monitor" />
      <arg name="manager" value="mlp_monitors" />
    </include>
  </group>

</launch>
