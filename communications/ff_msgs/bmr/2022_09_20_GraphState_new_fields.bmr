class update_ff_msgs_GraphState_d0020fbc20fe81214e0f3f2b41dd4c22(MessageUpdateRule):
	old_type = "ff_msgs/GraphState"
	old_full_text = """
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

std_msgs/Header header # header with timestamp
string child_frame_id # frame ID
# State Estimates
geometry_msgs/Pose pose # world_T_body 
geometry_msgs/Vector3 velocity # body velocity
geometry_msgs/Vector3 gyro_bias # estimated gyro bias
geometry_msgs/Vector3 accel_bias # estimated accel bias
# Covariances/Confidences
# covariance diagonal. 1-3 orientation, 4-6 gyro bias, 7-9 velocity, 10-12 accel bias, 13-15 position
float32[15] cov_diag
# confidence in estimate. 0 is good, 1 is a bit confused, 2 is lost
uint8 confidence
uint8 CONFIDENCE_GOOD = 0	# Tracking well
uint8 CONFIDENCE_POOR = 1	# Tracking poorly
uint8 CONFIDENCE_LOST = 2	# We are lost
# Stats
uint32 num_detected_of_features  
uint32 num_detected_ar_features 
uint32 num_detected_ml_features 
uint32 iterations # Optimization iterations
float32 optimization_time
float32 update_time # Include optimization_time and other operations to add data to graph
float32 callbacks_time # Includes processing msgs and their callbacks
float32 nodelet_runtime # Total runtime of nodelet iteration.  Includes update and callback time
uint32 num_factors
uint32 num_of_factors
uint32 num_ml_projection_factors
uint32 num_ml_pose_factors
uint32 num_states
# Status
bool standstill
bool estimating_bias # Are we busy estimating the bias?
uint8 fan_speed_mode # Used for imu filtering

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
"""

	new_type = "ff_msgs/GraphState"
	new_full_text = """
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

std_msgs/Header header # header with timestamp
string child_frame_id # frame ID
# State Estimates
geometry_msgs/Pose pose # world_T_body 
geometry_msgs/Vector3 velocity # body velocity
geometry_msgs/Vector3 gyro_bias # estimated gyro bias
geometry_msgs/Vector3 accel_bias # estimated accel bias
# Covariances/Confidences
# covariance diagonal. 1-3 orientation, 4-6 gyro bias, 7-9 velocity, 10-12 accel bias, 13-15 position
float32[15] cov_diag
# confidence in estimate. 0 is good, 1 is a bit confused, 2 is lost
uint8 confidence
uint8 CONFIDENCE_GOOD = 0	# Tracking well
uint8 CONFIDENCE_POOR = 1	# Tracking poorly
uint8 CONFIDENCE_LOST = 2	# We are lost
# Stats
uint32 num_detected_of_features  
uint32 num_detected_ar_features 
uint32 num_detected_ml_features 
uint32 num_detected_sm_features
uint32 iterations # Optimization iterations
float32 optimization_time
float32 update_time # Include optimization_time and other operations to add data to graph
float32 callbacks_time # Includes processing msgs and their callbacks
float32 nodelet_runtime # Total runtime of nodelet iteration.  Includes update and callback time
uint32 num_factors
uint32 num_of_factors
uint32 num_ml_projection_factors
uint32 num_sm_projection_factors
uint32 num_ml_pose_factors
uint32 num_states
# Status
bool standstill
bool estimating_bias # Are we busy estimating the bias?
uint8 fan_speed_mode # Used for imu filtering

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
"""

	order = 0
	migrated_types = [
		("Header","Header"),
		("geometry_msgs/Pose","geometry_msgs/Pose"),
		("geometry_msgs/Vector3","geometry_msgs/Vector3"),]

	valid = True

	def update(self, old_msg, new_msg):
		self.migrate(old_msg.header, new_msg.header)
		new_msg.child_frame_id = old_msg.child_frame_id
		self.migrate(old_msg.pose, new_msg.pose)
		self.migrate(old_msg.velocity, new_msg.velocity)
		self.migrate(old_msg.gyro_bias, new_msg.gyro_bias)
		self.migrate(old_msg.accel_bias, new_msg.accel_bias)
		new_msg.cov_diag = old_msg.cov_diag
		new_msg.confidence = old_msg.confidence
		new_msg.num_detected_of_features = old_msg.num_detected_of_features
		new_msg.num_detected_ar_features = old_msg.num_detected_ar_features
		new_msg.num_detected_ml_features = old_msg.num_detected_ml_features
		#No matching field name in old message
		new_msg.num_detected_sm_features = 0
		new_msg.iterations = old_msg.iterations
		new_msg.optimization_time = old_msg.optimization_time
		new_msg.update_time = old_msg.update_time
		new_msg.callbacks_time = old_msg.callbacks_time
		new_msg.nodelet_runtime = old_msg.nodelet_runtime
		new_msg.num_factors = old_msg.num_factors
		new_msg.num_of_factors = old_msg.num_of_factors
		new_msg.num_ml_projection_factors = old_msg.num_ml_projection_factors
		#No matching field name in old message
		new_msg.num_sm_projection_factors = 0
		new_msg.num_ml_pose_factors = old_msg.num_ml_pose_factors
		new_msg.num_states = old_msg.num_states
		new_msg.standstill = old_msg.standstill
		new_msg.estimating_bias = old_msg.estimating_bias
		new_msg.fan_speed_mode = old_msg.fan_speed_mode
